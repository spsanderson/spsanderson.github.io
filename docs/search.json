[
  {
    "objectID": "year_review_2023.html",
    "href": "year_review_2023.html",
    "title": "A Review of 2023",
    "section": "",
    "text": "2023 A Year in Review\n\nThe year 2023 was a big year for me. I did a lot of coding, a lot more than I typically do. The biggest push came personally in my ongoing development of my R packages that are in the healthyverse. To use the healthyverse simply do so in the familiar fashion:\n\ninstall.packages(\"healthyverse\")\nlibrary(healthyverse)\n\nHere are links to all of the packages:\n\nhealthyR\nhealthyR.data\nhealthyR.ts\nhealthyR.ai\nTidyDensity\nhealthyverse\ntidyAML\n\nIn order to start looking at some of the data that pertains to 2023 lets first get the data from the CRAN logs. Since I do this daily already, I can simply use the rds file I already have. I am going to go through the motions though, in case others might want to do something similar. The functions I am using to get the data can be found here\nNow lets get that data!\n\nlibrary(tidyverse)\nlibrary(lubridate)\nsource(\"01_scripts/get_data_functions.R\")\nsource(\"01_scripts/data_manipulation_functions.R\")\nsource(\"01_scripts/mapping_functions.R\")\n\nget_cran_data()\nget_package_release_data()\ncsv_to_rds()\n\nOk now that we have our data, lets ensure that we are only using the year 2023. We can do this by filtering out data by time with the timetk package.\nNow lets filter our data below, some pre-processing may need to take place.\n\nlibrary(timetk)\ndata_tbl &lt;- downloads_processed_tbl() %&gt;%\n  filter_by_time(\n    .date_var = date,\n    .start_date = \"2023\",\n    .end_date = \"2023\"\n  )\n\nglimpse(data_tbl)\n\nRows: 32,438\nColumns: 11\n$ date      &lt;date&gt; 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,…\n$ time      &lt;Period&gt; 2H 32M 10S, 9H 45M 29S, 9H 45M 40S, 9H 45M 51S, 9H 45M 51…\n$ date_time &lt;dttm&gt; 2023-01-01 02:32:10, 2023-01-01 09:45:29, 2023-01-01 09:45:…\n$ size      &lt;int&gt; 2016932, 604699, 2652829, 2297618, 2331476, 84561, 251193, 2…\n$ r_version &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"4.1.1\", \"4.1.1\", \"4.1.1\", \"4.1.…\n$ r_arch    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"x86_64\", \"x86_64\", \"x86_64\", \"x…\n$ r_os      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"mingw32\", \"mingw32\", \"mingw32\",…\n$ package   &lt;chr&gt; \"healthyR.ts\", \"healthyR.ai\", \"healthyR.data\", \"healthyR.ts\"…\n$ version   &lt;chr&gt; \"0.2.5\", \"0.0.10\", \"1.0.1\", \"0.2.5\", \"0.2.0\", \"1.0.2\", \"0.0.…\n$ country   &lt;chr&gt; \"AU\", \"US\", \"US\", \"US\", \"US\", \"US\", \"AU\", \"BE\", \"BE\", \"BE\", …\n$ ip_id     &lt;int&gt; 5938, 11, 11, 11, 11, 11, 5938, 14255, 14255, 14255, 14255, …\n\n\nNow that we have our data, we have it for the year 2023 only with a start date of 2023-01-01 and an end date of 2023-12-31.\n\n\nPackage Information\nThe first thing we will do is look at how many downloads there were for each pacakge and it’s version.\n\nlibrary(knitr)\n\ndata_tbl %&gt;% \n  count(package, version) %&gt;% \n  pivot_wider(\n    id_cols       = version\n    , names_from  = package\n    , values_from = n\n    , values_fill = 0\n    ) %&gt;%\n  arrange(version) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nversion\nTidyDensity\nhealthyR\nhealthyR.ai\nhealthyR.data\nhealthyR.ts\nhealthyverse\ntidyAML\n\n\n\n\n0.0.1\n156\n0\n106\n0\n0\n0\n788\n\n\n0.0.10\n0\n0\n210\n0\n0\n0\n0\n\n\n0.0.11\n0\n0\n431\n0\n0\n0\n0\n\n\n0.0.12\n0\n0\n683\n0\n0\n0\n0\n\n\n0.0.13\n0\n0\n1989\n0\n0\n0\n0\n\n\n0.0.2\n0\n0\n107\n0\n0\n0\n1804\n\n\n0.0.3\n0\n0\n106\n0\n0\n0\n468\n\n\n0.0.4\n0\n0\n107\n0\n0\n0\n0\n\n\n0.0.5\n0\n0\n158\n0\n0\n0\n0\n\n\n0.0.6\n0\n0\n436\n0\n0\n0\n0\n\n\n0.0.7\n0\n0\n107\n0\n0\n0\n0\n\n\n0.0.8\n0\n0\n104\n0\n0\n0\n0\n\n\n0.0.9\n0\n0\n110\n0\n0\n0\n0\n\n\n0.1.0\n0\n107\n0\n0\n112\n0\n0\n\n\n0.1.1\n0\n107\n0\n0\n122\n0\n0\n\n\n0.1.2\n0\n123\n0\n0\n105\n0\n0\n\n\n0.1.3\n0\n109\n0\n0\n104\n0\n0\n\n\n0.1.4\n0\n109\n0\n0\n109\n0\n0\n\n\n0.1.5\n0\n108\n0\n0\n111\n0\n0\n\n\n0.1.6\n0\n109\n0\n0\n111\n0\n0\n\n\n0.1.7\n0\n157\n0\n0\n158\n0\n0\n\n\n0.1.8\n0\n438\n0\n0\n437\n0\n0\n\n\n0.1.9\n0\n108\n0\n0\n107\n0\n0\n\n\n0.2.0\n0\n880\n0\n0\n107\n0\n0\n\n\n0.2.1\n0\n2363\n0\n0\n110\n0\n0\n\n\n0.2.10\n0\n0\n0\n0\n503\n0\n0\n\n\n0.2.11\n0\n0\n0\n0\n527\n0\n0\n\n\n0.2.2\n0\n0\n0\n0\n108\n0\n0\n\n\n0.2.3\n0\n0\n0\n0\n114\n0\n0\n\n\n0.2.4\n0\n0\n0\n0\n113\n0\n0\n\n\n0.2.5\n0\n0\n0\n0\n162\n0\n0\n\n\n0.2.6\n0\n0\n0\n0\n424\n0\n0\n\n\n0.2.7\n0\n0\n0\n0\n816\n0\n0\n\n\n0.2.8\n0\n0\n0\n0\n1255\n0\n0\n\n\n0.2.9\n0\n0\n0\n0\n700\n0\n0\n\n\n0.3.0\n0\n0\n0\n0\n507\n0\n0\n\n\n1.0.0\n105\n0\n0\n107\n0\n123\n0\n\n\n1.0.1\n427\n0\n0\n940\n0\n105\n0\n\n\n1.0.2\n0\n0\n0\n1377\n0\n537\n0\n\n\n1.0.3\n0\n0\n0\n1831\n0\n451\n0\n\n\n1.0.4\n0\n0\n0\n0\n0\n1576\n0\n\n\n1.1.0\n104\n0\n0\n0\n0\n0\n0\n\n\n1.2.0\n106\n0\n0\n0\n0\n0\n0\n\n\n1.2.1\n104\n0\n0\n0\n0\n0\n0\n\n\n1.2.2\n106\n0\n0\n0\n0\n0\n0\n\n\n1.2.3\n105\n0\n0\n0\n0\n0\n0\n\n\n1.2.4\n1979\n0\n0\n0\n0\n0\n0\n\n\n1.2.5\n1889\n0\n0\n0\n0\n0\n0\n\n\n1.2.6\n956\n0\n0\n0\n0\n0\n0\n\n\n\n\n\nNow lets see how many total downloads for the year there were for each package.\n\ndata_tbl %&gt;%\n  count(package) %&gt;%\n  set_names(\"Package\",\"Total Downloads\") %&gt;%\n  kable()\n\n\n\n\nPackage\nTotal Downloads\n\n\n\n\nTidyDensity\n6037\n\n\nhealthyR\n4718\n\n\nhealthyR.ai\n4654\n\n\nhealthyR.data\n4255\n\n\nhealthyR.ts\n6922\n\n\nhealthyverse\n2792\n\n\ntidyAML\n3060\n\n\n\n\ndata_tbl %&gt;%\n  select(package, version) %&gt;%\n  group_by(package) %&gt;%\n  distinct() %&gt;%\n  mutate(release_count = n()) %&gt;%\n  ungroup() %&gt;%\n  select(package, release_count) %&gt;%\n  distinct() %&gt;%\n  set_names(\"Package\", \"Number of Releases\") %&gt;%\n  kable()\n\n\n\n\nPackage\nNumber of Releases\n\n\n\n\nhealthyR.ts\n23\n\n\nhealthyR.ai\n13\n\n\nhealthyR.data\n4\n\n\nhealthyR\n12\n\n\nhealthyverse\n5\n\n\nTidyDensity\n11\n\n\ntidyAML\n3\n\n\n\n\ntotal_number_of_releases &lt;- data_tbl %&gt;%\n  select(package, version) %&gt;%\n  group_by(package) %&gt;%\n  distinct() %&gt;%\n  mutate(release_count = n()) %&gt;%\n  ungroup() %&gt;%\n  select(package, release_count) %&gt;%\n  distinct() %&gt;%\n  summarise(total = sum(release_count, na.rm = TRUE))\n\nSo all in all there was a total of 32,438 downloads of all the healthyverse packages in 2023. There were in total 71 package releases as well.\n\n\nGraphs\nNow lets graph the data out!\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  ggplot(aes(x = version, y = n, alpha = 0.382)) +\n  geom_col(aes(group = package, fill = package)) +\n  facet_wrap(package ~., ncol = 2, scales = \"free\") +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Downloads by Package for 2023\",\n    subtitle = \"Faceted by Package\",\n    x = \"Version\",\n    y = \"Downloads\",\n    fill = \"Package\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  group_by(package) %&gt;%\n  mutate(cumulative_downloads = cumsum(n)) %&gt;%\n  mutate(record = row_number()) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = record, y = cumulative_downloads, alpha = 0.382)) +\n  geom_col(aes(group = package, fill = package)) +\n  facet_wrap(package ~., ncol = 2, scales = \"free\") +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n    labs(\n    title = \"Downloads by Package for 2023\",\n    subtitle = \"Faceted by Package\",\n    x = \"Relase Number\",\n    y = \"Downloads\",\n    fill = \"Package\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  group_by(package) %&gt;%\n  mutate(cumulative_downloads = cumsum(n)) %&gt;%\n  mutate(record = row_number()) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = record, y = cumulative_downloads, alpha = 0.382)) +\n  geom_line(aes(color = package, group = package), size = 1) +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Cumulative Downloads by Package for 2023\",\n    subtitle = \"Colored by Package\",\n    x = \"Release Number\",\n    y = \"Downloads\",\n    color = \"Package\"\n  )\n\n\n\n\n\n\n\n\n\n\nTime Series Graphs\nNow lets get some time-series graphs.\n\nlibrary(healthyR.ts)\npkg_tbl &lt;- readRDS(\"00_data/pkg_release_tbl.rds\")\n\ndata_tbl %&gt;% \n  summarise_by_time(.date_var = date, n = n()) %&gt;% \n  ts_calendar_heatmap_plot(.date_col = date, .value_col = n, .interactive = FALSE)\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\", package) %&gt;%\n  ggplot(aes(date, log1p(value))) +\n  geom_point(aes(group = package, color = package), size = 1) +\n  ggtitle(paste(\"Package Downloads: {healthyverse}\")) +\n  geom_smooth(method = \"loess\", color = \"black\",  se = FALSE) +\n  geom_vline(\n    data = pkg_tbl\n    , aes(xintercept = as.Date(date))\n    , color = \"red\"\n    , lwd = 1\n    , lty = \"solid\"\n  ) +\n  facet_wrap(package ~., ncol = 2, scales = \"free_x\") +\n  theme_minimal() +\n  labs(\n    subtitle = \"Vertical lines represent release dates\",\n    x = \"Date\",\n    y = \"log1p(Counts)\",\n    color = \"Package\"\n  ) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  rename(Actual = value) %&gt;%\n  tk_augment_differences(.value = Actual, .differences = 1) %&gt;%\n  tk_augment_differences(.value = Actual, .differences = 2) %&gt;%\n  rename(velocity = contains(\"_diff1\")) %&gt;%\n  rename(acceleration = contains(\"_diff2\")) %&gt;%\n  pivot_longer(-date) %&gt;%\n  mutate(name = str_to_title(name)) %&gt;%\n  mutate(name = as_factor(name)) %&gt;%\n  ggplot(aes(x = date, y = log1p(value), group = name)) +\n  geom_point(alpha = .2) +\n  geom_vline(\n    data = pkg_tbl\n    , aes(xintercept = as.Date(date), color = package)\n    , lwd = 1\n    , lty = \"solid\"\n  ) +\n  facet_wrap(name ~ ., ncol = 1, scale = \"free\") +\n  theme_minimal() +\n  labs(\n    title = \"Total Downloads: Trend, Velocity, and Accelertion\",\n    subtitle = \"Vertical Lines Indicate a CRAN Release date for a package.\",\n    x = \"Date\",\n    y = \"\",\n    color = \"\"\n  ) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  plot_seasonal_diagnostics(\n    .date_var = date,\n    .value = log1p(value),\n    .interactive = FALSE\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Seasonal Diagnostics\",\n    subtitle = \"Values are log1p\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  plot_stl_diagnostics(\n    .date_var = date,\n    .value = log1p(value),\n    .interactive = FALSE\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"STL Diagnostics\",\n    subtitle = \"Values are log1p\"\n  )\n\n\n\n\n\n\n\n\n\n\nMapping\nSo now that we have seen all the downloads in variaous ways, where did they all come from? Lets take a look.\n\nlibrary(tmaptools)\nlibrary(countrycode)\nlibrary(mapview)\nlibrary(htmlwidgets)\nlibrary(webshot)\n\n# mapping_dataset(.data_year = \"2023\") %&gt;%\n#   head() %&gt;%\n#   knitr::kable()\n\nl &lt;- map_leaflet()\nsaveWidget(l, \"downloads_map.html\")\ntry(webshot(\"downloads_map.html\", file = \"map.png\", cliprect = \"viewport\"))\n\n\n\n\n\n\n\n\n\nThere was a total of 147 different countries that downloaded healthyverse packages in 2023."
  },
  {
    "objectID": "year_review_2021.html",
    "href": "year_review_2021.html",
    "title": "A Review of 2021",
    "section": "",
    "text": "2021 A Year in Review\n\nThe year 2021 was a big year for me. I did a lot of coding, a lot more than I typically do. The biggest push came personally in my ongoing development of my R packages that are in the healthyverse. To use the healthyverse simply do so in the familiar fashion:\n\ninstall.packages(\"healthyverse\")\nlibrary(healthyverse)\n\nHere are links to all of the packages:\n\nhealthyR\nhealthyR.data\nhealthyR.ts\nhealthyR.ai\nhealthyverse\n\nIn order to start looking at some of the data that pertains to 2021 lets first get the data from the CRAN logs. Since I do this daily already, I can simply use the rds file I already have. I am going to go through the motions though, in case others might want to do something similar. The functions I am using to get the data can be found here\nNow lets get that data!\n\nlibrary(tidyverse)\nlibrary(lubridate)\nsource(\"01_scripts/get_data_functions.R\")\nsource(\"01_scripts/data_manipulation_functions.R\")\nsource(\"01_scripts/mapping_functions.R\")\n\nget_cran_data()\nget_package_release_data()\ncsv_to_rds()\n\nOk now that we have our data, lets ensure that we are only using the year 2021. We can do this by filtering out data by time with the timetk package.\nNow lets filter our data below, some pre-processing may need to take place.\n\nlibrary(timetk)\ndata_tbl &lt;- downloads_processed_tbl() %&gt;%\n  filter_by_time(\n    .date_var = date,\n    .start_date = \"2021\",\n    .end_date = \"2021\"\n  )\n\nglimpse(data_tbl)\n\nRows: 24,887\nColumns: 11\n$ date      &lt;date&gt; 2021-01-01, 2021-01-01, 2021-01-01, 2021-01-01, 2021-01-01,…\n$ time      &lt;Period&gt; 3H 41M 37S, 3H 42M 2S, 10H 1M 57S, 10H 1M 57S, 10H 1M 57S…\n$ date_time &lt;dttm&gt; 2021-01-01 03:41:37, 2021-01-01 03:42:02, 2021-01-01 10:01:…\n$ size      &lt;int&gt; 2910045, 5668471, 533, 5669257, 81738, 5668465, 530, 14701, …\n$ r_version &lt;chr&gt; \"4.0.3\", \"3.6.0\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ r_arch    &lt;chr&gt; \"x86_64\", \"x86_64\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ r_os      &lt;chr&gt; \"mingw32\", \"mingw32\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ package   &lt;chr&gt; \"healthyR\", \"healthyR.data\", \"healthyR.data\", \"healthyR.data…\n$ version   &lt;chr&gt; \"0.1.1\", \"1.0.0\", \"1.0.0\", \"1.0.0\", \"1.0.0\", \"1.0.0\", \"1.0.0…\n$ country   &lt;chr&gt; \"GH\", \"GH\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", …\n$ ip_id     &lt;int&gt; 220, 220, 8154, 8154, 8154, 8154, 8154, 8154, 8154, 8154, 81…\n\n\nNow that we have our data, we have it for the year 2021 only with a start date of 2021-01-01 and an end date of 2021-12-31.\n\n\nPackage Information\nThe first thing we will do is look at how many downloads there were for each pacakge and it’s version.\n\nlibrary(knitr)\n\ndata_tbl %&gt;% \n  count(package, version) %&gt;% \n  pivot_wider(\n    id_cols       = version\n    , names_from  = package\n    , values_from = n\n    , values_fill = 0\n    ) %&gt;%\n  arrange(version) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\nversion\nhealthyR\nhealthyR.ai\nhealthyR.data\nhealthyR.ts\nhealthyverse\n\n\n\n\n0.0.1\n0\n271\n0\n0\n0\n\n\n0.0.2\n0\n1519\n0\n0\n0\n\n\n0.0.3\n0\n281\n0\n0\n0\n\n\n0.0.4\n0\n324\n0\n0\n0\n\n\n0.1.0\n89\n0\n0\n386\n0\n\n\n0.1.1\n813\n0\n0\n1867\n0\n\n\n0.1.2\n1388\n0\n0\n907\n0\n\n\n0.1.3\n232\n0\n0\n1027\n0\n\n\n0.1.4\n280\n0\n0\n586\n0\n\n\n0.1.5\n931\n0\n0\n422\n0\n\n\n0.1.6\n2083\n0\n0\n165\n0\n\n\n0.1.7\n0\n0\n0\n314\n0\n\n\n1.0.0\n0\n0\n2003\n0\n2199\n\n\n1.0.1\n0\n0\n4854\n0\n1946\n\n\n\n\n\nNow lets see how many total downloads for the year there were for each package.\n\ndata_tbl %&gt;%\n  count(package) %&gt;%\n  set_names(\"Package\",\"Total Downloads\") %&gt;%\n  kable()\n\n\n\n\nPackage\nTotal Downloads\n\n\n\n\nhealthyR\n5816\n\n\nhealthyR.ai\n2395\n\n\nhealthyR.data\n6857\n\n\nhealthyR.ts\n5674\n\n\nhealthyverse\n4145\n\n\n\n\ndata_tbl %&gt;%\n  select(package, version) %&gt;%\n  group_by(package) %&gt;%\n  distinct() %&gt;%\n  mutate(release_count = n()) %&gt;%\n  ungroup() %&gt;%\n  select(package, release_count) %&gt;%\n  distinct() %&gt;%\n  set_names(\"Package\", \"Number of Releases\") %&gt;%\n  kable()\n\n\n\n\nPackage\nNumber of Releases\n\n\n\n\nhealthyR\n7\n\n\nhealthyR.data\n2\n\n\nhealthyR.ts\n8\n\n\nhealthyverse\n2\n\n\nhealthyR.ai\n4\n\n\n\n\ntotal_number_of_releases &lt;- data_tbl %&gt;%\n  select(package, version) %&gt;%\n  group_by(package) %&gt;%\n  distinct() %&gt;%\n  mutate(release_count = n()) %&gt;%\n  ungroup() %&gt;%\n  select(package, release_count) %&gt;%\n  distinct() %&gt;%\n  summarise(total = sum(release_count, na.rm = TRUE))\n\nSo all in all there was a total of 24,887 downloads of all the healthyverse packages in 2021. There were in total 23 package releases as well.\n\n\nGraphs\nNow lets graph the data out!\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  ggplot(aes(x = version, y = n, alpha = 0.382)) +\n  geom_col(aes(group = package, fill = package)) +\n  facet_wrap(package ~., ncol = 2, scales = \"free\") +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Downloads by Package for 2021\",\n    subtitle = \"Faceted by Package\",\n    x = \"Version\",\n    y = \"Downloads\",\n    fill = \"Package\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  group_by(package) %&gt;%\n  mutate(cumulative_downloads = cumsum(n)) %&gt;%\n  mutate(record = row_number()) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = record, y = cumulative_downloads, alpha = 0.382)) +\n  geom_col(aes(group = package, fill = package)) +\n  facet_wrap(package ~., ncol = 2, scales = \"free\") +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n    labs(\n    title = \"Downloads by Package for 2021\",\n    subtitle = \"Faceted by Package\",\n    x = \"Relase Number\",\n    y = \"Downloads\",\n    fill = \"Package\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  group_by(package) %&gt;%\n  mutate(cumulative_downloads = cumsum(n)) %&gt;%\n  mutate(record = row_number()) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = record, y = cumulative_downloads, alpha = 0.382)) +\n  geom_line(aes(color = package, group = package), size = 1) +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Cumulative Downloads by Package for 2021\",\n    subtitle = \"Colored by Package\",\n    x = \"Release Number\",\n    y = \"Downloads\",\n    color = \"Package\"\n  )\n\n\n\n\n\n\n\n\n\n\nTime Series Graphs\nNow lets get some time-series graphs.\n\nlibrary(healthyR.ts)\npkg_tbl &lt;- readRDS(\"00_data/pkg_release_tbl.rds\")\n\ndata_tbl %&gt;% \n  summarise_by_time(.date_var = date, n = n()) %&gt;% \n  ts_calendar_heatmap_plot(.date_col = date, .value_col = n, .interactive = FALSE)\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\", package) %&gt;%\n  ggplot(aes(date, log1p(value))) +\n  geom_point(aes(group = package, color = package), size = 1) +\n  ggtitle(paste(\"Package Downloads: {healthyverse}\")) +\n  geom_smooth(method = \"loess\", color = \"black\",  se = FALSE) +\n  geom_vline(\n    data = pkg_tbl\n    , aes(xintercept = as.Date(date))\n    , color = \"red\"\n    , lwd = 1\n    , lty = \"solid\"\n  ) +\n  facet_wrap(package ~., ncol = 2, scales = \"free_x\") +\n  theme_minimal() +\n  labs(\n    subtitle = \"Vertical lines represent release dates\",\n    x = \"Date\",\n    y = \"log1p(Counts)\",\n    color = \"Package\"\n  ) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  rename(Actual = value) %&gt;%\n  tk_augment_differences(.value = Actual, .differences = 1) %&gt;%\n  tk_augment_differences(.value = Actual, .differences = 2) %&gt;%\n  rename(velocity = contains(\"_diff1\")) %&gt;%\n  rename(acceleration = contains(\"_diff2\")) %&gt;%\n  pivot_longer(-date) %&gt;%\n  mutate(name = str_to_title(name)) %&gt;%\n  mutate(name = as_factor(name)) %&gt;%\n  ggplot(aes(x = date, y = log1p(value), group = name)) +\n  geom_point(alpha = .2) +\n  geom_vline(\n    data = pkg_tbl\n    , aes(xintercept = as.Date(date), color = package)\n    , lwd = 1\n    , lty = \"solid\"\n  ) +\n  facet_wrap(name ~ ., ncol = 1, scale = \"free\") +\n  theme_minimal() +\n  labs(\n    title = \"Total Downloads: Trend, Velocity, and Accelertion\",\n    subtitle = \"Vertical Lines Indicate a CRAN Release date for a package.\",\n    x = \"Date\",\n    y = \"\",\n    color = \"\"\n  ) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  plot_seasonal_diagnostics(\n    .date_var = date,\n    .value = log1p(value),\n    .interactive = FALSE\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Seasonal Diagnostics\",\n    subtitle = \"Values are log1p\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  plot_stl_diagnostics(\n    .date_var = date,\n    .value = log1p(value),\n    .interactive = FALSE\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"STL Diagnostics\",\n    subtitle = \"Values are log1p\"\n  )\n\n\n\n\n\n\n\n\n\n\nMapping\nSo now that we have seen all the downloads in variaous ways, where did they all come from? Lets take a look.\n\nlibrary(tmaptools)\nlibrary(countrycode)\nlibrary(mapview)\nlibrary(htmlwidgets)\nlibrary(webshot)\n\nmapping_dataset(.data_year = \"2021\") %&gt;%\n  head() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\ncountry\nlatitude\nlongitude\ndisplay_name\nicon\n\n\n\n\nGhana\n8.030028\n-1.080027\nGhana\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nUnited States\n39.783730\n-100.445882\nUnited States\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nHong Kong SAR China\n22.350627\n114.184916\n香港 Hong Kong, 中国\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nCanada\n61.066692\n-107.991707\nCanada\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nChina\n35.000074\n104.999927\n中国\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nJordan\n31.166705\n36.941628\nالأردن\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\n\n\n# l &lt;- map_leaflet(.data = data_tbl)\n# mapshot(x = l, file = \"map.png\")\n\nl &lt;- map_leaflet()\nsaveWidget(l, \"downloads_map.html\")\ntry(webshot(\"downloads_map.html\", file = \"map.png\", cliprect = \"viewport\"))\n\n\n\n\n\n\n\n\n\nThere was a total of 147 different countries that downloaded healthyverse packages in 2021.\n\n\nGitHub Stats\nNow lets take a look at some quick stats from my GitHub\nFirst my contribution grid:\n\nSecondly my badge:"
  },
  {
    "objectID": "tidyaml.html",
    "href": "tidyaml.html",
    "title": "tidyAML",
    "section": "",
    "text": "Purpose\nThe goal of tidyAML is to provide a consistent verb framework for generating, visualizing, and analyzing automated models built inside of the tidymodels ecosystem.\ntidyAML can be found here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Steven P. Sanderson II, MPH",
    "section": "",
    "text": "Book(s)\nHere is an Amazon Link to my book Extending Excel with Python and R\nAll of my projects \n\n\nPackage Stats Page\nClick here for package stats.\n\n\nPackage Time Series Analysis\nClick here\n\n\nGitHub Stats Badge\n\n\n\nSteven P. Sanderson II, MPH"
  },
  {
    "objectID": "healthyrdata.html",
    "href": "healthyrdata.html",
    "title": "healthyR.data",
    "section": "",
    "text": "Purpose\nThe healthyR.data package provides a useful simulated data-set that can be used for all sorts of data analysis, including time-series and machine learning.\nhealthyR.data can be found here"
  },
  {
    "objectID": "healthyr.html",
    "href": "healthyr.html",
    "title": "healthyR",
    "section": "",
    "text": "Purpose\nThe beginning of healthyR started from an idea that popped into my head while at work. I was looking for a way to democratize the gathering of and visualization of data in both the administrative and clinical sense. This led me to build out LICHospitalR a package for my employer that is under active development just like healthyR.\nhealthyR can be found here"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello! I’m Steven Paul Sanderson II, MPH, a professional with a Master of Public Health degree, specializing in areas related to health information systems management and data science. I work as a Manager of Applications at Stony Brook Medicine in the Patient Accounts Department. In this role, I oversees the implementation and management of software applications that support the department’s operations and patient accounts management.\nIn addition to my professional responsibilities, I am an active developer in the R programming community. I maintain several R packages, including: healthyR, healthyR.ts, healthyR.ai, healthyR.data, TidyDensity, tidyAML and healthyverse.\nThese packages are geared towards data analysis, time series forecasting, artificial intelligence applications, data management, density estimation, and automated machine learning, reflecting his expertise in coding and data science.\nI am also passionate about continuous learning and professional development, with goals to pursue an additional master’s degrees in health information systems management. My interests span computers, coding, movies, and music."
  },
  {
    "objectID": "extending_excel_book_v1.html",
    "href": "extending_excel_book_v1.html",
    "title": "Extending Excel with Python and R",
    "section": "",
    "text": "I have worked with David Kun of the ownR platform on a book called Extending Excel with Python and R. With this book you will learn how to eamlessly integrate the Python and R programming languages with spreadsheet-based data analysis to maximize productivity.\n\nKey Features\n\nPerform advanced data analysis and visualization techniques with R and Python on Excel data\nUse exploratory data analysis and pivot table analysis for deeper insights into your data\nIntegrate R and Python code directly into Excel using VBA or API endpoints\nPurchase of the print or Kindle book includes a free PDF eBook\n\n\n\nBook Description\nFor businesses, data analysis and visualization are crucial for informed decision-making; however, Excel’s limitations can make these tasks time-consuming and challenging. Extending Excel with Python and R is a game changer resource written by experts Steven Sanderson, the author of the healthyverse suite of R packages, and David Kun, co-founder of Functional Analytics, the company behind the ownR platform engineering solution for R, Python, and other data science languages.\nThis comprehensive guide transforms the way you work with spreadsheet-based data by integrating Python and R with Excel to automate tasks, execute statistical analysis, and create powerful visualizations. Working through the chapters, you’ll find out how to perform exploratory data analysis, time series analysis, and even integrate APIs for maximum efficiency. Whether you’re a beginner or an expert, this book has everything you need to unlock Excel’s full potential and take your data analysis skills to the next level.\nBy the end of this book, you’ll be able to import data from Excel, manipulate it in R or Python, and perform the data analysis tasks in your preferred framework while pushing the results back to Excel for sharing with others as needed.\nWhat you will learn\n\nRead and write Excel files with R and Python libraries\nAutomate Excel tasks with R and Python scripts\nUse R and Python to execute Excel VBA macros\nFormat Excel sheets using R and Python packages\nCreate graphs with ggplot2 and Matplotlib in Excel\nAnalyze Excel data with statistical methods and time series analysis\nExplore various methods to call R and Python functions from Excel\n\n\n\nWho this book is for\nIf you’re a data analyst or data scientist, or a quants, actuaries, or data practitioner looking to enhance your Excel skills and expand your data analysis capabilities with R and Python, this book is for you. It provides a comprehensive introduction to the topics covered, making it suitable for both beginners and intermediate learners. A basic understanding of Excel, Python, and R is all you need to get started.\nTable of Contents\n\nReading Excel Spreadsheets\nWriting Excel Spreadsheets\nExecuting VBA Code from R and Python\nAutomating Further (Email Notifications and More)\nFormatting Your Excel sheet\nInserting ggplot2/matplotlib Graphs\nPivot Tables (tidyquant in R and with win32com and pypiwin32 in Python)/Summary Table {gt}\nExploratory Data Analysis with R and Python\nStatistical Analysis: Linear and Logistic Regression\nTime Series Analysis: Statistics, Plots, and Forecasting\nCalling R/Python Locally from Excel Directly or via an API\nData Analysis and Visualization with R and Python for Excel Data – A Case Study"
  },
  {
    "objectID": "healthyrai.html",
    "href": "healthyrai.html",
    "title": "healthyR.ai",
    "section": "",
    "text": "Purpose\nThe gola of healthyR.ai is to provide a consistent verb framework for performing data modeling and forecasting for problems like classification and regression on both administrative and clinical hospital data.\nhealthyR.ai can be found here"
  },
  {
    "objectID": "healthyrts.html",
    "href": "healthyrts.html",
    "title": "healthyR.ts",
    "section": "",
    "text": "Purpose\nThe goal of healthyR.ts is to provide a consistent verb framework for performing time series analysis and forecasting on both administrative and clinical hospital data.\nhealthyR.ts can be found here"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "My Packages",
    "section": "",
    "text": "Purpose\nThe intent of this library is to make it easy to install and update to the latets version of all of the healthyR packages.\nhealthyverse can be found here"
  },
  {
    "objectID": "tidydensity.html",
    "href": "tidydensity.html",
    "title": "TidyDensity",
    "section": "",
    "text": "Purpose\nThe goal of TidyDensity is to provide a consistent verb framework for generating, visualizing, and analyzing random and empirical data.\nTidyDensity can be found here"
  },
  {
    "objectID": "year_review_2022.html",
    "href": "year_review_2022.html",
    "title": "A Review of 2022",
    "section": "",
    "text": "2022 A Year in Review\n\nThe year 2022 was a big year for me. I did a lot of coding, a lot more than I typically do. The biggest push came personally in my ongoing development of my R packages that are in the healthyverse. To use the healthyverse simply do so in the familiar fashion:\n\ninstall.packages(\"healthyverse\")\nlibrary(healthyverse)\n\nHere are links to all of the packages:\n\nhealthyR\nhealthyR.data\nhealthyR.ts\nhealthyR.ai\nTidyDensity\nhealthyverse\n\nIn order to start looking at some of the data that pertains to 2022 lets first get the data from the CRAN logs. Since I do this daily already, I can simply use the rds file I already have. I am going to go through the motions though, in case others might want to do something similar. The functions I am using to get the data can be found here\nNow lets get that data!\n\nlibrary(tidyverse)\nlibrary(lubridate)\nsource(\"01_scripts/get_data_functions.R\")\nsource(\"01_scripts/data_manipulation_functions.R\")\nsource(\"01_scripts/mapping_functions.R\")\n\nget_cran_data()\nget_package_release_data()\ncsv_to_rds()\n\nOk now that we have our data, lets ensure that we are only using the year 2022. We can do this by filtering out data by time with the timetk package.\nNow lets filter our data below, some pre-processing may need to take place.\n\nlibrary(timetk)\ndata_tbl &lt;- downloads_processed_tbl() %&gt;%\n  filter_by_time(\n    .date_var = date,\n    .start_date = \"2022\",\n    .end_date = \"2022\"\n  )\n\nglimpse(data_tbl)\n\nRows: 27,799\nColumns: 11\n$ date      &lt;date&gt; 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-01,…\n$ time      &lt;Period&gt; 7H 9M 18S, 1H 40M 38S, 1H 40M 46S, 1H 41M 4S, 10H 52M 47S…\n$ date_time &lt;dttm&gt; 2022-01-01 07:09:18, 2022-01-01 01:40:38, 2022-01-01 01:40:…\n$ size      &lt;int&gt; 4866327, 1032739, 989862, 1028890, 13101, 14533, 14548, 1310…\n$ r_version &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"4.1.2\", \"4.1.2\", \"4…\n$ r_arch    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"i386\", \"i386\", \"i38…\n$ r_os      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"mingw32\", \"mingw32\"…\n$ package   &lt;chr&gt; \"healthyR.data\", \"healthyR\", \"healthyR\", \"healthyR\", \"health…\n$ version   &lt;chr&gt; \"1.0.1\", \"0.1.6\", \"0.1.6\", \"0.1.6\", \"1.0.1\", \"0.1.6\", \"0.1.6…\n$ country   &lt;chr&gt; \"AU\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"AU\", …\n$ ip_id     &lt;int&gt; 52, 48, 48, 48, 6414, 3451, 487, 817, 1251, 52, 1149, 1149, …\n\n\nNow that we have our data, we have it for the year 2022 only with a start date of 2022-01-01 and an end date of 2022-12-31.\n\n\nPackage Information\nThe first thing we will do is look at how many downloads there were for each pacakge and it’s version.\n\nlibrary(knitr)\n\ndata_tbl %&gt;% \n  count(package, version) %&gt;% \n  pivot_wider(\n    id_cols       = version\n    , names_from  = package\n    , values_from = n\n    , values_fill = 0\n    ) %&gt;%\n  arrange(version) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nversion\nTidyDensity\nhealthyR\nhealthyR.ai\nhealthyR.data\nhealthyR.ts\nhealthyverse\n\n\n\n\n0.0.1\n993\n0\n88\n0\n0\n0\n\n\n0.0.10\n0\n0\n384\n0\n0\n0\n\n\n0.0.2\n0\n0\n91\n0\n0\n0\n\n\n0.0.3\n0\n0\n91\n0\n0\n0\n\n\n0.0.4\n0\n0\n141\n0\n0\n0\n\n\n0.0.5\n0\n0\n985\n0\n0\n0\n\n\n0.0.6\n0\n0\n1082\n0\n0\n0\n\n\n0.0.7\n0\n0\n706\n0\n0\n0\n\n\n0.0.8\n0\n0\n836\n0\n0\n0\n\n\n0.0.9\n0\n0\n607\n0\n0\n0\n\n\n0.1.0\n0\n88\n0\n0\n87\n0\n\n\n0.1.1\n0\n90\n0\n0\n99\n0\n\n\n0.1.2\n0\n101\n0\n0\n87\n0\n\n\n0.1.3\n0\n89\n0\n0\n87\n0\n\n\n0.1.4\n0\n90\n0\n0\n87\n0\n\n\n0.1.5\n0\n90\n0\n0\n90\n0\n\n\n0.1.6\n0\n137\n0\n0\n90\n0\n\n\n0.1.7\n0\n970\n0\n0\n881\n0\n\n\n0.1.8\n0\n1080\n0\n0\n1056\n0\n\n\n0.1.9\n0\n876\n0\n0\n485\n0\n\n\n0.2.0\n0\n1342\n0\n0\n487\n0\n\n\n0.2.1\n0\n0\n0\n0\n301\n0\n\n\n0.2.2\n0\n0\n0\n0\n541\n0\n\n\n0.2.3\n0\n0\n0\n0\n532\n0\n\n\n0.2.4\n0\n0\n0\n0\n153\n0\n\n\n0.2.5\n0\n0\n0\n0\n403\n0\n\n\n1.0.0\n408\n0\n0\n90\n0\n125\n\n\n1.0.1\n908\n0\n0\n3618\n0\n217\n\n\n1.0.2\n0\n0\n0\n0\n0\n3030\n\n\n1.1.0\n445\n0\n0\n0\n0\n0\n\n\n1.2.0\n529\n0\n0\n0\n0\n0\n\n\n1.2.1\n347\n0\n0\n0\n0\n0\n\n\n1.2.2\n570\n0\n0\n0\n0\n0\n\n\n1.2.3\n593\n0\n0\n0\n0\n0\n\n\n1.2.4\n496\n0\n0\n0\n0\n0\n\n\n\n\n\nNow lets see how many total downloads for the year there were for each package.\n\ndata_tbl %&gt;%\n  count(package) %&gt;%\n  set_names(\"Package\",\"Total Downloads\") %&gt;%\n  kable()\n\n\n\n\nPackage\nTotal Downloads\n\n\n\n\nTidyDensity\n5289\n\n\nhealthyR\n4953\n\n\nhealthyR.ai\n5011\n\n\nhealthyR.data\n3708\n\n\nhealthyR.ts\n5466\n\n\nhealthyverse\n3372\n\n\n\n\ndata_tbl %&gt;%\n  select(package, version) %&gt;%\n  group_by(package) %&gt;%\n  distinct() %&gt;%\n  mutate(release_count = n()) %&gt;%\n  ungroup() %&gt;%\n  select(package, release_count) %&gt;%\n  distinct() %&gt;%\n  set_names(\"Package\", \"Number of Releases\") %&gt;%\n  kable()\n\n\n\n\nPackage\nNumber of Releases\n\n\n\n\nhealthyR.data\n2\n\n\nhealthyR\n11\n\n\nhealthyverse\n3\n\n\nhealthyR.ai\n10\n\n\nhealthyR.ts\n16\n\n\nTidyDensity\n9\n\n\n\n\ntotal_number_of_releases &lt;- data_tbl %&gt;%\n  select(package, version) %&gt;%\n  group_by(package) %&gt;%\n  distinct() %&gt;%\n  mutate(release_count = n()) %&gt;%\n  ungroup() %&gt;%\n  select(package, release_count) %&gt;%\n  distinct() %&gt;%\n  summarise(total = sum(release_count, na.rm = TRUE))\n\nSo all in all there was a total of 27,799 downloads of all the healthyverse packages in 2022. There were in total 51 package releases as well.\n\n\nGraphs\nNow lets graph the data out!\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  ggplot(aes(x = version, y = n, alpha = 0.382)) +\n  geom_col(aes(group = package, fill = package)) +\n  facet_wrap(package ~., ncol = 2, scales = \"free\") +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Downloads by Package for 2022\",\n    subtitle = \"Faceted by Package\",\n    x = \"Version\",\n    y = \"Downloads\",\n    fill = \"Package\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  group_by(package) %&gt;%\n  mutate(cumulative_downloads = cumsum(n)) %&gt;%\n  mutate(record = row_number()) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = record, y = cumulative_downloads, alpha = 0.382)) +\n  geom_col(aes(group = package, fill = package)) +\n  facet_wrap(package ~., ncol = 2, scales = \"free\") +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n    labs(\n    title = \"Downloads by Package for 2022\",\n    subtitle = \"Faceted by Package\",\n    x = \"Relase Number\",\n    y = \"Downloads\",\n    fill = \"Package\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  count(package, version) %&gt;%\n  group_by(package) %&gt;%\n  mutate(cumulative_downloads = cumsum(n)) %&gt;%\n  mutate(record = row_number()) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = record, y = cumulative_downloads, alpha = 0.382)) +\n  geom_line(aes(color = package, group = package), size = 1) +\n  scale_y_continuous(labels = scales::label_number(big.mark = \",\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Cumulative Downloads by Package for 2022\",\n    subtitle = \"Colored by Package\",\n    x = \"Release Number\",\n    y = \"Downloads\",\n    color = \"Package\"\n  )\n\n\n\n\n\n\n\n\n\n\nTime Series Graphs\nNow lets get some time-series graphs.\n\nlibrary(healthyR.ts)\npkg_tbl &lt;- readRDS(\"00_data/pkg_release_tbl.rds\")\n\ndata_tbl %&gt;% \n  summarise_by_time(.date_var = date, n = n()) %&gt;% \n  ts_calendar_heatmap_plot(.date_col = date, .value_col = n, .interactive = FALSE)\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\", package) %&gt;%\n  ggplot(aes(date, log1p(value))) +\n  geom_point(aes(group = package, color = package), size = 1) +\n  ggtitle(paste(\"Package Downloads: {healthyverse}\")) +\n  geom_smooth(method = \"loess\", color = \"black\",  se = FALSE) +\n  geom_vline(\n    data = pkg_tbl\n    , aes(xintercept = as.Date(date))\n    , color = \"red\"\n    , lwd = 1\n    , lty = \"solid\"\n  ) +\n  facet_wrap(package ~., ncol = 2, scales = \"free_x\") +\n  theme_minimal() +\n  labs(\n    subtitle = \"Vertical lines represent release dates\",\n    x = \"Date\",\n    y = \"log1p(Counts)\",\n    color = \"Package\"\n  ) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  rename(Actual = value) %&gt;%\n  tk_augment_differences(.value = Actual, .differences = 1) %&gt;%\n  tk_augment_differences(.value = Actual, .differences = 2) %&gt;%\n  rename(velocity = contains(\"_diff1\")) %&gt;%\n  rename(acceleration = contains(\"_diff2\")) %&gt;%\n  pivot_longer(-date) %&gt;%\n  mutate(name = str_to_title(name)) %&gt;%\n  mutate(name = as_factor(name)) %&gt;%\n  ggplot(aes(x = date, y = log1p(value), group = name)) +\n  geom_point(alpha = .2) +\n  geom_vline(\n    data = pkg_tbl\n    , aes(xintercept = as.Date(date), color = package)\n    , lwd = 1\n    , lty = \"solid\"\n  ) +\n  facet_wrap(name ~ ., ncol = 1, scale = \"free\") +\n  theme_minimal() +\n  labs(\n    title = \"Total Downloads: Trend, Velocity, and Accelertion\",\n    subtitle = \"Vertical Lines Indicate a CRAN Release date for a package.\",\n    x = \"Date\",\n    y = \"\",\n    color = \"\"\n  ) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  plot_seasonal_diagnostics(\n    .date_var = date,\n    .value = log1p(value),\n    .interactive = FALSE\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Seasonal Diagnostics\",\n    subtitle = \"Values are log1p\"\n  )\n\n\n\n\n\n\n\ndata_tbl %&gt;%\n  ts_downloads_tbl(.by_time = \"day\") %&gt;%\n  plot_stl_diagnostics(\n    .date_var = date,\n    .value = log1p(value),\n    .interactive = FALSE\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"STL Diagnostics\",\n    subtitle = \"Values are log1p\"\n  )\n\n\n\n\n\n\n\n\n\n\nMapping\nSo now that we have seen all the downloads in variaous ways, where did they all come from? Lets take a look.\n\nlibrary(tmaptools)\nlibrary(countrycode)\nlibrary(mapview)\nlibrary(htmlwidgets)\nlibrary(webshot)\n\nmapping_dataset(.data_year = \"2022\") %&gt;%\n  head() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\ncountry\nlatitude\nlongitude\ndisplay_name\nicon\n\n\n\n\nGhana\n8.030028\n-1.080027\nGhana\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nUnited States\n39.783730\n-100.445882\nUnited States\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nHong Kong SAR China\n22.350627\n114.184916\n香港 Hong Kong, 中国\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nCanada\n61.066692\n-107.991707\nCanada\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nChina\n35.000074\n104.999927\n中国\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\nJordan\n31.166705\n36.941628\nالأردن\nhttps://nominatim.openstreetmap.org/ui/mapicons//poi_boundary_administrative.p.20.png\n\n\n\n\n# l &lt;- map_leaflet(.data = data_tbl)\n# mapshot(x = l, file = \"map.png\")\n\nl &lt;- map_leaflet()\nsaveWidget(l, \"downloads_map.html\")\ntry(webshot(\"downloads_map.html\", file = \"map.png\", cliprect = \"viewport\"))\n\n\n\n\n\n\n\n\n\nThere was a total of 147 different countries that downloaded healthyverse packages in 2022."
  }
]